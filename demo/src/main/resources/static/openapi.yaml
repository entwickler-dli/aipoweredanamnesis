openapi: 3.0.1
servers:
  # Added by API Auto Mocking Plugin
  - description: localhost
    url: http://localhost:8080
info:
  version: "1.0.0"
  title: swiss-api
tags:
  - name: User
    description: User
  - name: Flat
    description: Flat
  - name: Admin
    description: Admin
  - name: Country
    description: Switzerland's details later other countries'
  - name: Image
    description: Base64 image service
  - name: Document
    description: All documents that corresponds to the page
  - name: Validation
    description: All types of validation that is required iin the application
  - name: Subscription
    description: Any subscription related methods
  - name: Support
    description: Every support related methods

paths:
  #User
  /user/login:
    post:
      tags:
        - User
      operationId: UserLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignIn'
      responses:
        '200':
          description: client successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /user/register:
    post:
      tags:
        - User
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successfully operation
          content:
            application/json:
              schema:
                type: string
        '201':
          description: successfully registered user
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '402':
          $ref: '#/components/responses/PaymentRequired'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/ConflictError'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /user/favorite/add/{userId}/{flatId}:
    post:
      tags:
        - User
      operationId: addFavoriteToUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: flatId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Favorite added to user
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /user:
    get:
      tags:
        - User
      operationId: getUserList
      description: get the full list of users
      responses:
        '200':
          description: successfully gave the user's list back
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /user/{id}:
    get:
      tags:
        - User
      operationId: getUserById
      description: get a user by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: successfully gave the user back
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /user/me:
    get:
      tags:
        - User
      operationId: getUserMe
      description: get my user datas
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Token'
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: successfully gave the user back
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /user/lastsearch/{id}:
    get:
      tags:
        - User
      operationId: getUserLastSearch
      description: get a user by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: successfully gave the last search of user back
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /user/update/{id}:
    put:
      tags:
        - User
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: user was successfully updated
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: [ ]

  /user/updatephone/{id}:
    put:
      tags:
        - User
      operationId: updateUserPhone
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: user's phone was successfully updated
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: [ ]

  /user/changepassword/{id}:
    put:
      tags:
        - User
      operationId: userUpdatePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: password successfully updated
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: [ ]

  /user/changesubscription/{id}:
    put:
      tags:
        - User
      operationId: changeUserSubscriptionType
      requestBody:
        content:
          application/json:
            schema:
              type: string
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: subscription was successfully updated for the user
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: [ ]

  /user/delete/{id}:
    delete:
      tags:
        - User
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: user was successfully deleted
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - bearerAuth: [ ]

  /user/favorite/remove/{userId}/{flatId}:
    delete:
      tags:
        - User
      operationId: removeFavoriteFromUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: flatId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Favorite removed from user
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  #Flat
  /flat/post:
    post:
      tags:
        - Flat
      operationId: createFlat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlatOffer'
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: operation successful
          content:
            application/json:
              schema:
                type: string
        '201':
          description: flat was successfully added
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /flat/search:
    post:
      tags:
        - Flat
      operationId: searchFlat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Search'
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: successfully gave the flat back
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlatList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /flat:
    get:
      tags:
        - Flat
      operationId: getFlatList
      description: get the full list of flats
      responses:
        '200':
          description: successfully gave the flat's list back
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlatList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /flat/id/{id}:
    get:
      tags:
        - Flat
      operationId: getFlatById
      description: get a flat by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successfully gave the flat back
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlatOffer'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /flat/user/{userId}:
    get:
      tags:
        - Flat
      operationId: getFlatByUserId
      description: get a flat by userid
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: successfully gave the flat back
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlatList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'
  # TODO CHECK IF USER WITH JWT POSTED THE FLAT

  /flat/user/favorite/{userId}:
    get:
      tags:
        - Flat
      operationId: getFavoritesByUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Gave back the favorites by user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlatList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /flat/update/{id}:
    put:
      tags:
        - Flat
      operationId: updateFlat
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlatOffer'
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: flat was successfully updated
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'
  # TODO CHECK IF USER WITH JWT POSTED THE FLAT
  /flat/delete/{id}:
    delete:
      tags:
        - Flat
      operationId: deleteFlat
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: flat was successfully deleted
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /flat/propertystatus/{propertyStatus}/{numberOfElements}:
    get:
      tags:
        - Flat
      operationId: getFlatByPropertyStatus
      description: get a flat by propertyStatus
      parameters:
        - name: propertyStatus
          in: path
          required: true
          schema:
            type: string
        - name: numberOfElements
          in: path
          required: true
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: successfully gave the flats back
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlatList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  #Country
  /country/switzerland/post:
    post:
      tags:
        - Country
      operationId: createSwissCity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Switzerland'
      responses:
        '200':
          description: Swiss city was successfully added
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /country/switzerland:
    get:
      tags:
        - Country
      operationId: getAllSwissCities
      description: get the full list of all Swiss cities
      responses:
        '200':
          description: successfully gave the cities' list back
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SwitzerlandList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /country/switzerland/{id}:
    get:
      tags:
        - Country
      operationId: getSwissCityById
      description: get a swiss city by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successfully gave the city back
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Switzerland'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /country/switzerland/update/{id}:
    put:
      tags:
        - Country
      operationId: updateSwissCity
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Switzerland'
      responses:
        '200':
          description: Swiss city was successfully updated
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /country/switzerland/delete/{id}:
    delete:
      tags:
        - Country
      operationId: deleteSwissCity
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Switzerland'
      responses:
        '200':
          description: Swiss city was successfully deleted
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  #Image
  /image/post:
    post:
      tags:
        - Image
      operationId: createImage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
      responses:
        '200':
          description: Image was successfully added
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /image/flat/post:
    post:
      tags:
        - Image
      operationId: createImages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageList'
      responses:
        '200':
          description: Image was successfully added
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /image/{id}:
    get:
      tags:
        - Image
      operationId: getImageById
      description: get an image by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successfully gave the image back
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /image/flat/{id}:
    get:
      tags:
        - Image
      operationId: getImageByFlatId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      description: get the full list of all images for flat
      responses:
        '200':
          description: successfully gave the image list back
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /image/delete/{id}:
    delete:
      tags:
        - Image
      operationId: deleteImage
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Image was successfully deleted
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /image/delete/flat/{id}:
    delete:
      tags:
        - Image
      operationId: deleteFlatImage
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Images were successfully deleted
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  #Documents
  /document/{type}:
    get:
      tags:
        - Document
      operationId: getDocument
      description: get the privacy Statement Document
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successfully gave privacy statement back
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  #Validation
  /validation/{email}/{code}:
    post:
      tags:
        - Validation
      operationId: validateEmail
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
        - name: code
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: code successfully validated
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /validation/forgetpassword:
    post:
      tags:
        - Validation
      operationId: forgetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgetPassword'
      responses:
        '200':
          description: email was sent
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /validation/forgetpasswordrequest/{email}:
    post:
      tags:
        - Validation
      operationId: forgetPasswordRequest
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: email was sent
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  #Subscription
  /subscription/addnewsubscription:
    post:
      tags:
        - Subscription
      operationId: addNewSubscriptionType
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: subscription was added
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'


  /subscription/getsubscriptiontypes:
    get:
      tags:
        - Subscription
      operationId: getSubscriptionTypes
      description: get all subscription types, this is mainly for admin
      responses:
        '200':
          description: successfully gave subscription types back
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionTypeList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /subscription/modifysubscription/{id}:
    put:
      tags:
        - Subscription
      operationId: modifySubscriptionType
      requestBody:
        content:
          application/json:
            schema:
              type: string
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: subscription was successfully updated
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /subscription/deletesubscription/{id}:
    delete:
      tags:
        - Subscription
      operationId: deleteSubscriptionType
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: subscription was deleted
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  #Support
  /support/request:
    post:
      tags:
        - Support
      operationId: supportRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupportRequest'
      responses:
        '200':
          description: support email was sent
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    Token:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        expiry:
          type: number
          example: 36000000

    User:
      type: object
      description: DB schema user
      properties:
        userId:
          type: integer
          format: int32
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        password:
          type: string
          format: password
        typeOfUser:
          type: string
        lastSearchId:
          type: integer
          format: int32
        subscriptionType:
          type: string

    UserList:
      type: object
      description: list of all users
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'

    UserType:
      type: object
      description: user types
      properties:
        userType:
          type: string
          enum:
            - rent
            - offer

    SubscriptionType:
      type: object
      description: subscription type
      properties:
        id:
          type: integer
          format: int32
        subscriptionType:
          type: string

    SubscriptionTypeList:
      type: object
      description: all subscription types
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionType'

    SubscriptionTableByUser:
      type: object
      description: subscription table
      properties:
        id:
          type: integer
          format: int32
        userId:
          type: integer
          format: int32
        subscriptionType:
          type: string
        expirationDate:
          type: string
          format: date

    Switzerland:
      type: object
      description: Switzerland
      properties:
        cityId:
          type: integer
          format: int32
        city:
          type: string
        canton:
          type: string
        postcode:
          type: string
        coordX:
          type: number
          format: double
        coordY:
          type: number
          format: double

    SwitzerlandList:
      type: object
      description: Switzerland cities' list
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Switzerland'

    Image:
      type: object
      description: Image table
      properties:
        id:
          type: integer
          format: int32
        flatOfferId:
          type: integer
          format: int32
        name:
          type: string
        content:
          type: string

    ImageList:
      type: object
      description: List of all images
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Image'

    Favorite:
      type: object
      description: Favorite linking table
      properties:
        id:
          type: integer
          format: int32
        flatOfferId:
          type: integer
          format: int32
        userRentId:
          type: integer
          format: int32

    FlatOffer:
      type: object
      description: A flat advertisement item
      properties:
        id:
          type: integer
          format: int32
        userOfferId:
          type: integer
          format: int32
        title:
          type: string
        flatType:
          type: string
        propertyStatus:
          type: string
        locationCountry:
          type: string
        locationCity:
          type: string
        locationZip:
          type: integer
          format: int32
        locationAddress:
          type: string
        rentAmountGross:
          type: integer
          format: int32
        rentAmountNet:
          type: integer
          format: int32
        utilitiesCost:
          type: integer
          format: int32
        deposit:
          type: integer
          format: int32
        availableFrom:
          type: string
          format: date
        availableTill:
          type: string
          format: date
        numberOfRooms:
          type: number
          format: float
        size:
          type: integer
          format: int32
        floorLevel:
          type: string
        furnishedOrUnfurnished:
          type: boolean
        furnishToSell:
          type: boolean
        balcony:
          type: boolean
        pets:
          type: boolean
        photos:
          $ref: '#/components/schemas/ImageList'
        description:
          type: string
        parkingSpace:
          type: boolean
        garage:
          type: boolean
        lift:
          type: boolean
        wheelchairAccessible:
          type: boolean
        dishwasher:
          type: boolean
        cableConnection:
          type: boolean
        dryer:
          type: boolean
        washingMachine:
          type: boolean

    Search:
      type: object
      description: A flat search item
      properties:
        flatType:
          type: string
        propertyStatus:
          type: string
        locationCountry:
          type: string
        locationCity:
          type: string
        locationZip:
          type: integer
          format: int32
        rentAmountGross:
          type: integer
          format: int32
        rentAmountNet:
          type: integer
          format: int32
        utilitiesCost:
          type: integer
          format: int32
        deposit:
          type: integer
          format: int32
        availableFrom:
          type: string
          format: date
        availableTill:
          type: string
          format: date
        numberOfRooms:
          type: number
          format: float
        size:
          type: integer
          format: int32
        floorLevel:
          type: string
        furnishedOrUnfurnished:
          type: boolean
        furnishToSell:
          type: boolean
        balcony:
          type: boolean
        pets:
          type: boolean
        description:
          type: string
        parkingSpace:
          type: boolean
        garage:
          type: boolean
        lift:
          type: boolean
        wheelchairAccessible:
          type: boolean
        dishwasher:
          type: boolean
        cableConnection:
          type: boolean
        dryer:
          type: boolean
        washingMachine:
          type: boolean

    FlatList:
      type: object
      description: List of all flats
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/FlatOffer'

    ChangePassword:
      type: object
      description: change password object contains three password
      properties:
        userId:
          type: integer
          format: int32
        oldPassword:
          type: string
          format: password
        newPassword:
          type: string
          format: password
        newPasswordAgain:
          type: string
          format: password

    ForgetPassword:
      type: object
      description: you can use it for forget pswd
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        passwordConfirmation:
          type: string
          format: password

    SignIn:
      type: object
      description: sign in schema user
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    SignUpUser:
      type: object
      description: sign up schema email plus password fields
      properties:
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        passwordConfirmation:
          type: string
          format: password

    VerificationCode:
      type: object
      description: verification code can be sent via this object (six length)
      properties:
        email:
          type: string
          format: email
        verificationCode:
          type: integer
          format: int32
          minimum: 6
          maximum: 6

    SupportRequest:
      type: object
      description: Format for the support page that the user fills
      properties:
        email:
          type: string
          format: email
        subject:
          type: string
        details:
          type: string

    Document:
      type: object
      description: Dokumentum
      properties:
        description:
          type: string
        documentType:
          type: string
        lastUpdated:
          type: string
          format: date

    ClientErrorResponse:
      properties:
        error:
          $ref: '#/components/schemas/ClientError'
      type: object
      example:
        error:
          message: 'Authorization information (Header: %s) is missing or invalid.'

    ConflictErrorResponse:
      properties:
        error:
          $ref: '#/components/schemas/ConflictError'
      type: object
      example:
        error:
          message: 'Conflict Error'

    ServerErrorResponse:
      properties:
        error:
          $ref: '#/components/schemas/ServerError'
      type: object
      example:
        error:
          message: 'Internal Server Error.'
          trace_id: 66

    SubscriptionErrorResponse:
      properties:
        error:
          $ref: '#/components/schemas/ClientError'
      type: object
      example:
        error:
          message: 'You do not have subscription for this operation'

    TooManyRequestsResponse:
      properties:
        error:
          $ref: '#/components/schemas/ClientError'
      type: object
      example:
        error:
          message: 'Too many requests'

    ValidationErrorResponse:
      properties:
        message:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
      type: object

    ClientError:
      properties:
        message:
          type: string
      type: object
    ConflictError:
      properties:
        message:
          type: string
      type: object

    ServerError:
      properties:
        message:
          type: string
        trace_id:
          description: 'You should send us this ID to investigate the issue.'
          type: string
      type: object

    ValidationError:
      properties:
        field:
          type: string
        message:
          type: string
      type: object

  responses:
    BadRequest:
      description: 'The request is malformed.'
      headers:
        X-RateLimit-Limit:
          description: 'Request limit per minute.'
          schema:
            type: integer
            format: int32
        X-RateLimit-Remaining:
          description: 'The number of requests left for the time window.'
          schema:
            type: integer
            format: int32
        X-RateLimit-Reset:
          description: 'The timestamp at which the current rate limit window resets.'
          schema:
            type: integer
            format: int32
        Retry-After:
          description: 'How many seconds you have to wait before making new request.'
          schema:
            type: integer
            format: int32
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClientErrorResponse'
    Unauthorized:
      description: 'Authorization information is missing or invalid.'
      headers:
        X-RateLimit-Limit:
          description: 'Request limit per minute.'
          schema:
            type: integer
            format: int32
        X-RateLimit-Remaining:
          description: 'The number of requests left for the time window.'
          schema:
            type: integer
            format: int32
        X-RateLimit-Reset:
          description: 'The timestamp at which the current rate limit window resets.'
          schema:
            type: integer
            format: int32
        Retry-After:
          description: 'How many seconds you have to wait before making new request.'
          schema:
            type: integer
            format: int32
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClientErrorResponse'
    Forbidden:
      description: 'Authenticated user doesn''t have access to the resource.'
      headers:
        X-RateLimit-Limit:
          description: 'Request limit per minute.'
          schema:
            type: integer
            format: int32
        X-RateLimit-Remaining:
          description: 'The number of requests left for the time window.'
          schema:
            type: integer
            format: int32
        X-RateLimit-Reset:
          description: 'The timestamp at which the current rate limit window resets.'
          schema:
            type: integer
            format: int32
        Retry-After:
          description: 'How many seconds you have to wait before making new request.'
          schema:
            type: integer
            format: int32
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClientErrorResponse'
    NotFound:
      description: 'Non-existent resource is requested.'
      headers:
        X-RateLimit-Limit:
          description: 'Request limit per minute.'
          schema:
            type: integer
            format: int32
        X-RateLimit-Remaining:
          description: 'The number of requests left for the time window.'
          schema:
            type: integer
            format: int32
        X-RateLimit-Reset:
          description: 'The timestamp at which the current rate limit window resets.'
          schema:
            type: integer
            format: int32
        Retry-After:
          description: 'How many seconds you have to wait before making new request.'
          schema:
            type: integer
            format: int32
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClientErrorResponse'
    ConflictError:
      description: 'Conflict error'
      headers:
        X-RateLimit-Limit:
          description: 'Request limit per minute.'
          schema:
            type: integer
            format: int32
        X-RateLimit-Remaining:
          description: 'The number of requests left for the time window.'
          schema:
            type: integer
            format: int32
        X-RateLimit-Reset:
          description: 'The timestamp at which the current rate limit window resets.'
          schema:
            type: integer
            format: int32
        Retry-After:
          description: 'How many seconds you have to wait before making new request.'
          schema:
            type: integer
            format: int32
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConflictErrorResponse'
    UnprocessableEntity:
      description: 'Validation errors occured.'
      headers:
        X-RateLimit-Limit:
          description: 'Request limit per minute.'
          schema:
            type: integer
            format: int32
        X-RateLimit-Remaining:
          description: 'The number of requests left for the time window.'
          schema:
            type: integer
            format: int32
        X-RateLimit-Reset:
          description: 'The timestamp at which the current rate limit window resets.'
          schema:
            type: integer
            format: int32
        Retry-After:
          description: 'How many seconds you have to wait before making new request.'
          schema:
            type: integer
            format: int32
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'
    ServerError:
      description: 'Internal server error.'
      headers:
        X-RateLimit-Limit:
          description: 'Request limit per minute.'
          schema:
            type: integer
            format: int32
        X-RateLimit-Remaining:
          description: 'The number of requests left for the time window.'
          schema:
            type: integer
            format: int32
        X-RateLimit-Reset:
          description: 'The timestamp at which the current rate limit window resets.'
          schema:
            type: integer
            format: int32
        Retry-After:
          description: 'How many seconds you have to wait before making new request.'
          schema:
            type: integer
            format: int32
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServerErrorResponse'
    TooManyRequests:
      description: 'Too many requests'
      headers:
        X-RateLimit-Limit:
          description: 'Request limit per minute.'
          schema:
            type: integer
            format: int32
        X-RateLimit-Remaining:
          description: 'The number of requests left for the time window.'
          schema:
            type: integer
            format: int32
        X-RateLimit-Reset:
          description: 'The timestamp at which the current rate limit window resets.'
          schema:
            type: integer
            format: int32
        Retry-After:
          description: 'How many seconds you have to wait before making new request.'
          schema:
            type: integer
            format: int32
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsResponse'
    PaymentRequired:
      description: 'Authenticated user doesn''t have subscription.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubscriptionErrorResponse'

  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes